Que:
Modifica el programa anterior para no haver de  carregar totes les dades a memòria

Para que:
Per aprendre com treballar en gestionar la memòria i fer el repte un poc més complicat

Pseudocodigo:

Como:
En primer lloc, les meues classes Colors i ReadClient no s'han modificat, per tant passaré a explicar les altres classes. Començaré explicant la classe Mantenible. Aquesta classe serveix com a pare per a les classes Mòdul i Alumne, només té un constructor amb els paràmetres nom i id, i les funcions són iguals que les funcions de la classe Alumne de la pràctica anterior. 
Les classes Alumne i Mòdul hereten de Mantenible i només tenen un constructor que crida al constructor de Mantenible. 
La classe Matrícula és igual que a la pràctica anterior. 
La classe Mantenibles és la classe pare d'Alumnes, Mòduls i Matrícules. Té unes 5 funcions: El mètode llegirFitxer llig un fitxer demanat amb el seu path com a paràmetre d'entrada i retorna un ArrayList de tipus Mantenible. 
	El mètode escriure demana el text a escriure i el path per apuntar al fitxer. buscarLlista crida a llegirFitxer i guarda l'ArrayList per a buscar el text demanat com a paràmetre i retorna la posició. 
	mostrarLlista mostra una llista dels objectes Mantenibles d'un fitxer. 
	I l'últim mètode és el fromString que demana com a paràmetre un ArrayList de Mantenible i el retorna com a cadena amb un format especial per a ser guardat en fitxers. 
La classe Alumnes té el menú similar al de la pràctica anterior amb unes lleugeres modificacions per adaptar-se a les funcions de la seua classe pare. També té les funcions alta() que té com a paràmetres d'entrada un ArrayList on s'han de fer les comprovacions i afegir els alumnes, el nom i l'id de l'alumne i el path on escriure després les modificacions. En acabar la funció crida a escriure de la classe pare per pujar els canvis al fitxer. 
La funció baixa() fa el mateix que en alumnes, però també elimina el mòdul de tots els alumnes. 
matricularAlumne i desmatricularAlumnes són pràcticament iguals que en la pràctica anterior, però demanant un ArrayList a modificar. 
La classe Mòduls, passa el mateix que en la classe Alumnes, alta() pot pujar diversos mòduls a la vegada a més de cridar la funció generarId() que genera un id per al mòdul. La funció baixa és la mateixa que en alumne, però també elimina el mòdul de tots els alumnes. matricularAlumne i desmatricularAlumnes són pràcticament iguals que en la pràctica anterior, però demanant un ArrayList a modificar. La classe Matrícules també ha canviat una mica, en totes les funcions demana un ArrayList a modificar. 
Les funcions dades(), enllaçarMatrícula(), qualificar(), modificar() i mostrar() són iguals, eccepte per el detalls de l'ArrayList. Les dues funcions afegides són llegirFitxer() llig el fitxer de matrícules i retorna un ArrayList d'aquestes i paraString() és la funció que retorna en cadena els objectes matrícula per a poder ser emmagatzemats. La meua classe principal és igual que en la pràctica anterior, però només amb el mètode menú.

Conclusión:

En conclusió, aquesta pràctica m'ha sigut una mica complicada, ja que he pres la decisió de crear dues classes més genèriques per a aquelles funcions que són iguals, però també m'ha resultat força cansada, ja que fer aquests canvis m'ha endarrerit molt.
