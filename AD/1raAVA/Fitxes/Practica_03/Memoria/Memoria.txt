Que:
Partint de la Practica anterior, corregint les errades que hi hagen, en coneixeries.

    afix la capacitat d'emmagatzemament en fitxer
    afix la capacitat de carregar en fitxer

En aquesta practica es farà la lectura i escriptura en bloc

Pseudocodigo:

Como:

En primer lloc, començaré diguent que les meus clases generals Colors i ReadClient, son iguals que en la practica anterior, pero estan en un altre paquet.

La classe Alumne té dos variables: nom, nia (totes dues cadenes de text) i despres te un metode comprobar datos que comproba amb un matchis si el string que demana com ha parametre complix un dels dos requisits per a que siga valid. Les funcions pedirName i pedirNia, serveixen per a demanar el nom o el nia per pantalla i fer us de la funció comprobarDatos per ha saber si el demanat per pantalla cumpleix els requisits, sino torna a demanar el nom o el nia. I les funcions toString i fromString que retornen les dades de el objecte segons un format.

La classe Modul te com ha variables nom i id, amb dos costrucotrs, un que demana tant el nom com el id i l'altre que sols demana el nom i genera un id automatic amb la funcio generarId de la propia clase. també te les funcions pedirId que demana un id i comproba que segueix un format amb un matches per a que sols puguen i aure 8 numeros. i per últim la funció fromString que retorna les dades seguent un format.

La meua classe Matricula es mols similar a la de la pratica anterior, la unica diferencia es que a part de el ArrayList de notas i la mitjana, també guarde el nia i el id del modul, també he afegit el metode fromString.

La meua classe Alumnes també es prou similar ha la practica 2 les uniques diferencies mes descatrable es que ara la meua funcio per a donar de alta un alumne te com a parametres de entrada el nom i el nia per a que he resulte mes facil la carrag de alumnes y també he afegit el metode fromString.

En la meua funcio Moduls he afegit un altre tipos de funcio alta per a que cree automaticament un id del modul y el metode fromString

La funcio Matriculas te algunes noves funcions com dades, que comprova si les dades son correctes i si no les torna a demanar. La funcio enlazarMatricula que demana un nia y un id i retorna una matricula de la llista de matricules, una nova funció qualificar que te com a parametre de entrada la matricula i un array de notes y el metode fromString.

En la meua clase principal he afegit unes variables final, que son els path de els fichers i tres funcions, dos de elles sencarreguen de carregar les dades y una altra escriu en els fichers.
La funció carrega() te com ha paramerte de entrada un path al ficher de on vol carregar i un boolean que li indica en el arraylist on vol carregar. carregar() llig la unica linea del ficher la separa en ";" i la guarda en un array que trona a separar eb "," i segons el boolean carrega en la arrayList de moduls o la de alumnes.

carregarMatricules(), fa el mateix pero aplicat al format de les matricules ja que les notes estan separades entre " " i el nia i el idModul en "," i entre matricules ";".

El metode escribir() demana una String de el contingut nou i antic i actualitzat i el ficher on es vol guardar, per a escriure en ell el string.

Al comencament de la clase principal cride a les dos funcions carregar i al final cride a el metode escribir introduint-li la funcio del objecte que vuic guardar, fromString i el path de on ho vuic guardar.


Conclusión:

En conclusió, aquesta pràctica m'ha sigut de gran utilitat per repassar àmpliament la programació de fichers en Java. Aquesta practica m'ha costat molt de temps de fer degut a que he tingut que cambiar les relacions de les meues Matricules, Moduls i Alumnes.
